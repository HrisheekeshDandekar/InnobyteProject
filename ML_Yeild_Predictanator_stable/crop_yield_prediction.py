# -*- coding: utf-8 -*-
"""Crop Yield Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KajJHsZMmsDP_5q6GiyKVWE7Ao7Bgjs_

# Importing Necessary Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""# Data Preprocessing"""

df = pd.read_csv('yield.csv')

df.head()

df.tail()

df.drop('Unnamed: 0',axis=1,inplace=True)

df.shape

df.info()

df.describe(include='all')

df.nunique()

len(df.Year.unique())

len(df.Area.unique())

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df['Area'].value_counts()   #returns object containing counts of unique values.

df

df.isnull().sum()

sns.heatmap(df.isnull(),yticklabels=False,cmap="Paired")

a=df.sample(250)
sns.lineplot(x="Year",y="pesticides_tonnes",data=a)
plt.show()

a=df.sample(99)
figsize=(22,10)
sns.lineplot(x="Year",y="average_rainfall_mm_per_year",data=a)
plt.xticks(rotation=90)
plt.show()

a=df.sample(99)
figsize=(50,30)
sns.lineplot(x="Year",y="avg_temp",data=a)
plt.xticks(rotation=90)
plt.show()

b=df.groupby("Item")["Item"].count()
plt.pie(b,labels=b.index,autopct="%.2f%%")
plt.xticks(rotation=90)
plt.title("Average Crop")
plt.show()

b=df.groupby("Year")["Year"].count()
sns.barplot(x=b.index,y=b.values)
plt.xticks(rotation=90)
plt.title("Count by Year")
plt.xlabel("Year")
plt.ylabel("hg/ha_yield")
plt.show()

"""# Transforming Average Rainfall per Year
In summary, this code identifies the indices of rows in the DataFrame df where the values in the column 'Rainfall' are not numeric strings. These rows can be considered for removal or further processing, depending on the specific use case.
"""

def isStr(obj):
    try:
        float(obj)
        return False
    except:
        return True
to_drop = df[df['average_rainfall_mm_per_year'].apply(isStr)].index

df = df.drop(to_drop)

df

df['average_rainfall_mm_per_year'] = df['average_rainfall_mm_per_year'].astype(np.float64)

"""# Graph Frequency vs Area"""

len(df['Area'].unique())

plt.figure(figsize=(15,20))
sns.countplot(y=df['Area'])
plt.show()

(df['Area'].value_counts() < 500).sum()

"""# Yield per Country"""

country = df['Area'].unique()
yield_per_country = []
for state in country:
    yield_per_country.append(df[df['Area']==state]['hg/ha_yield'].sum())

df['hg/ha_yield'].sum()

yield_per_country

"""# Yield per Country Graph"""

plt.figure(figsize=(15,20))
sns.barplot(y=country, x=yield_per_country)

"""# Graph Frequency vs Item"""

sns.countplot(y=df['Item'])

"""# Yield vs Item"""

crops = df['Item'].unique()

yield_per_crop = []
for crop in crops:
    yield_per_crop.append(df[df['Item']==crop]['hg/ha_yield'].sum())

sns.barplot(y=crops,x=yield_per_crop)

"""# Train Test Split Rearranging Columns"""

col = ['Year', 'average_rainfall_mm_per_year','pesticides_tonnes', 'avg_temp', 'Area', 'Item', 'hg/ha_yield']
df = df[col]
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

df.head(3)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0, shuffle=True)

"""# Converting Categorical to Numerical and Scaling the values"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler

ohe = OneHotEncoder(drop='first')
scale = StandardScaler()

preprocessor = ColumnTransformer(
        transformers = [
            ('StandardScale', scale, [0, 1, 2, 3]),
            ('OHE', ohe, [4, 5]),
        ],
        remainder='passthrough'
)

preprocessor

X_train_dummy = preprocessor.fit_transform(X_train)
X_test_dummy = preprocessor.transform(X_test)

preprocessor.get_feature_names_out(col[:-1])

"""# Model Training"""

#linear regression
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error,r2_score

models = {
    'lr':LinearRegression(),
    'lss':Lasso(),
    'Rid':Ridge(),
    'Knr':KNeighborsRegressor(),
    'Dtr':DecisionTreeRegressor()
}

for name, md in models.items():
    md.fit(X_train_dummy,y_train)
    y_pred = md.predict(X_test_dummy)

    print(f"{name} : mae : {mean_absolute_error(y_test,y_pred)} score : {r2_score(y_test,y_pred)}")

"""### Model Selection"""

dtr = DecisionTreeRegressor()
dtr.fit(X_train_dummy,y_train)
dtr.predict(X_test_dummy)

"""# Predictive System"""

def prediction(Year, average_rainfall_mm_per_year, pesticides_tonnes, avg_temp, Area, Item):
    # Create an array of the input features
    features = np.array([[Year, average_rainfall_mm_per_year, pesticides_tonnes, avg_temp, Area, Item]], dtype=object)

    # Transform the features using the preprocessor
    transformed_features = preprocessor.transform(features)

    # Make the prediction
    predicted_yield = dtr.predict(transformed_features).reshape(1, -1)

    return predicted_yield[0]

Year = 1990
average_rain_fall_mm_per_year =1485.0
pesticides_tonnes = 121.00
avg_temp = 16.37
Area = 'Albania'
Item = 'Maize'
result = prediction(Year, average_rain_fall_mm_per_year, pesticides_tonnes, avg_temp, Area, Item)

result

"""# Pickle Files"""

import pickle

pickle.dump(dtr,open('dtr.pkl','wb'))
pickle.dump(preprocessor,open('preprocessor.pkl','wb'))

import sklearn
print(sklearn.__version__)

